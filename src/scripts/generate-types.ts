import { IFormConfiguration } from '@/types/globalFormTypes';
import { reactifyName } from '@/utils/utils';

export async function generateTypes(
  config: IFormConfiguration,
): Promise<string> {
  const tableName = config.postgresTableName;
  const reactTableName = reactifyName(tableName);
  const fieldTypes: string[] = [];

  config.sections.forEach((section) => {
    section.fields.forEach((field) => {
      let fieldType: string;

      switch (field.type) {
        case 'number':
        case 'range':
          fieldType = field.required ? 'number' : 'number | null';
          break;

        case 'checkbox':
        case 'toggle':
          fieldType = 'boolean';
          break;

        case 'date':
        case 'time':
        case 'datetime-local':
        case 'month':
        case 'week':
          fieldType = field.required ? 'string' : 'string | null'; // ISO date/time string
          break;

        case 'file':
          if (field.pgConfig?.type === 'BYTEA') {
            fieldType = field.required ? 'string' : 'string | null'; // Base64 encoded data
          } else {
            fieldType = field.required ? 'string' : 'string | null'; // File URL/path
          }
          break;

        case 'color':
          fieldType = field.required ? 'string' : 'string | null'; // Hex color string
          break;

        case 'radio':
        case 'select':
          if (field.options && field.options.length > 0) {
            const values = field.options.map((option) =>
              typeof option === 'string' ? `'${option}'` : `'${option.value}'`,
            );
            fieldType = field.required
              ? values.join(' | ')
              : `${values.join(' | ')} | null`;
          } else {
            fieldType = field.required ? 'string' : 'string | null';
          }
          break;

        case 'hidden':
          fieldType = field.required ? 'string' : 'string | null';
          break;

        case 'text':
        case 'email':
        case 'url':
        case 'tel':
        case 'search':
        case 'password':
        case 'textarea':
        default:
          if (
            field.pgConfig?.type === 'JSON' ||
            field.pgConfig?.type === 'JSONB'
          ) {
            fieldType = field.required ? 'object' : 'object | null'; // JSON object
          } else if (field.pgConfig?.type === 'ARRAY') {
            fieldType = field.required ? 'string[]' : 'string[] | null'; // Array type
          } else if (field.pgConfig?.type === 'BOOLEAN') {
            fieldType = 'boolean';
          } else if (
            field.pgConfig?.type === 'INTEGER' ||
            field.pgConfig?.type === 'BIGINT' ||
            field.pgConfig?.type === 'DECIMAL' ||
            field.pgConfig?.type === 'NUMERIC' ||
            field.pgConfig?.type === 'REAL' ||
            field.pgConfig?.type === 'DOUBLE PRECISION'
          ) {
            fieldType = field.required ? 'number' : 'number | null';
          } else if (field.pgConfig?.type === 'BYTEA') {
            fieldType = field.required ? 'string' : 'string | null'; // Base64 encoded binary data
          } else if (field.pgConfig?.type === 'UUID') {
            fieldType = field.required ? 'string' : 'string | null'; // UUID string
          } else if (
            field.pgConfig?.type === 'TIMESTAMP' ||
            field.pgConfig?.type === 'TIMESTAMP WITH TIME ZONE' ||
            field.pgConfig?.type === 'DATE' ||
            field.pgConfig?.type === 'TIME'
          ) {
            fieldType = field.required ? 'string' : 'string | null'; // ISO date/time string
          } else if (
            field.pgConfig?.type === 'INET' ||
            field.pgConfig?.type === 'CIDR' ||
            field.pgConfig?.type === 'MACADDR'
          ) {
            fieldType = field.required ? 'string' : 'string | null'; // Network address string
          } else if (field.pgConfig?.type === 'XML') {
            fieldType = field.required ? 'string' : 'string | null'; // XML string
          } else {
            fieldType = field.required ? 'string' : 'string | null';
          }
      }

      const optionalMarker = field.required ? '' : '?';
      fieldTypes.push(`  ${field.name}${optionalMarker}: ${fieldType};`);
    });
  });

  return `/**
 * Generated Type Definitions for ${reactTableName}
 * 
 * This file is automatically generated from FormConfiguration.
 * Do not edit manually - regenerate using: npm run generate:all
 */

export interface I${reactTableName} {
  id: string;
  created_at: string;
  updated_at: string;
${fieldTypes.join('\n')}
}

export type T${reactTableName}FormData = Omit<${reactTableName}, 'id' | 'created_at' | 'updated_at'>;
export type TUpdate${reactTableName}Data = Partial<${reactTableName}FormData>;
`;
}
