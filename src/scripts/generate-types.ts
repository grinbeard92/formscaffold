import { FormConfiguration } from '@/types/globalFormTypes';

export async function generateTypes(
  config: FormConfiguration,
): Promise<string> {
  const tableName = config.postgresTableName;
  const capitalizedTableName =
    tableName.charAt(0).toUpperCase() + tableName.slice(1);

  // Generate field types from form sections
  const fieldTypes: string[] = [];

  config.sections.forEach((section) => {
    section.fields.forEach((field) => {
      let fieldType: string;

      switch (field.type) {
        case 'number':
          fieldType = field.required ? 'number' : 'number | null';
          break;
        case 'checkbox':
          fieldType = 'boolean';
          break;
        case 'date':
          fieldType = field.required ? 'string' : 'string | null'; // ISO date string
          break;
        case 'textarea':
          fieldType = field.required ? 'string' : 'string | null';
          break;
        default:
          fieldType = field.required ? 'string' : 'string | null';
      }

      const optionalMarker = field.required ? '' : '?';
      fieldTypes.push(`  ${field.name}${optionalMarker}: ${fieldType};`);
    });
  });

  return `/**
 * Generated Type Definitions for ${capitalizedTableName}
 * 
 * This file is automatically generated from FormConfiguration.
 * Do not edit manually - regenerate using: npm run generate:all
 */

export interface ${capitalizedTableName} {
  id: string;
  created_at: string;
  updated_at: string;
${fieldTypes.join('\n')}
}

export type ${capitalizedTableName}FormData = Omit<${capitalizedTableName}, 'id' | 'created_at' | 'updated_at'>;
export type Update${capitalizedTableName}Data = Partial<${capitalizedTableName}FormData>;
`;
}
